-- create table todos (
--   id uuid default gen_random_uuid() primary key,
--   counter bigint generated by default as identity,
--   text text,
--   done boolean default false,
--   created_at timestamptz default now(),
--   updated_at timestamptz default now(),
--   deleted boolean default false -- needed for soft deletes
-- );

create table "user" (
    id uuid default gen_random_uuid() primary key,
    email text,
    password text,
    name text,
    avatar text,
    created_at timestamptz default now(),
    updated_at timestamptz default now(),
    deleted boolean default false -- needed for soft deletes
);

create table "group" (
    id uuid default gen_random_uuid() primary key,
    name text,
    icon text,
    color text,
    created_at timestamptz default now(),
    updated_at timestamptz default now(),
    deleted boolean default false -- needed for soft deletes
);

create table threshold_type (
    id uuid default gen_random_uuid() primary key,
    name text,
    description text,
    created_at timestamptz default now(),
    updated_at timestamptz default now(),
    deleted boolean default false -- needed for soft deletes
);

create table frequency (
    id uuid default gen_random_uuid() primary key,
    name text,
    description text
);


create table recurrence (
    id uuid default gen_random_uuid() primary key,
    frequency_id uuid,
    time timestamptz,
    interval numeric,
    days_of_week numeric[],
    days_of_month numeric[],
    months_of_year numeric[],
    start_date timestamptz,
    end_date timestamptz,
    occurrences numeric,
    is_infinite boolean,
    is_threshold boolean,
    is_event boolean,
    created_at timestamptz default now(),
    updated_at timestamptz default now(),
    deleted boolean default false -- needed for soft deletes
);

create table reminder (
    id uuid default gen_random_uuid() primary key,
    name text,
    note text,
    priority numeric,
    threshold numeric,
    alarm timestamptz,
    icon text,
    group_id uuid,
    threshold_type_id uuid,
    recurrence_id uuid,
    done boolean default false,
    created_at timestamptz default now(),
    updated_at timestamptz default now(),
    deleted boolean default false -- needed for soft deletes
);

create table notification (
    id uuid,
    notify_at timestamptz,
    reminder_id uuid,
    created_at timestamptz default now(),
    updated_at timestamptz default now(),
    deleted boolean default false -- needed for soft deletes
);

create table user_reminder (
    user_id uuid,
    reminder_id uuid,
    created_at timestamptz default now(),
    updated_at timestamptz default now(),
    deleted boolean default false -- needed for soft deletes
);


alter table recurrence add constraint recurrence_frequency_id_fk foreign key (frequency_id) references frequency;
alter table reminder add constraint reminder_group_id_fk foreign key (group_id) references "group";
alter table reminder add constraint reminder_threshold_type_uid_fk foreign key (threshold_type_id) references threshold_type;
alter table reminder add constraint reminder_recurrence_id_fk foreign key (recurrence_id) references recurrence;
alter table notification add constraint notification_reminder_id_fk foreign key (reminder_id) references reminder;
alter table user_reminder add constraint user_reminder_user_id_fk foreign key (user_id) references "user";
alter table user_reminder add constraint user_reminder_reminder_id_fk foreign key (reminder_id) references reminder;


-- Enable realtime
alter publication supabase_realtime add table "user";
alter publication supabase_realtime add table "group";
alter publication supabase_realtime add table threshold_type;
alter publication supabase_realtime add table frequency;
alter publication supabase_realtime add table recurrence;
alter publication supabase_realtime add table reminder;
alter publication supabase_realtime add table notification;
alter publication supabase_realtime add table user_reminder;


-- Legend-State helper to facilitate "Sync only diffs" (changesSince: 'last-sync') mode
CREATE OR REPLACE FUNCTION handle_times()
    RETURNS trigger AS
    $$
    BEGIN
    IF (TG_OP = 'INSERT') THEN
        NEW.created_at := now();
        NEW.updated_at := now();
    ELSEIF (TG_OP = 'UPDATE') THEN
        NEW.created_at = OLD.created_at;
        NEW.updated_at = now();
    END IF;
    RETURN NEW;
    END;
    $$ language plpgsql;

CREATE TRIGGER handle_times_user
    BEFORE INSERT OR UPDATE ON "user"
    FOR EACH ROW
EXECUTE PROCEDURE handle_times();

CREATE TRIGGER handle_times_group
    BEFORE INSERT OR UPDATE ON "group"
    FOR EACH ROW
EXECUTE PROCEDURE handle_times();

CREATE TRIGGER handle_times_threshold_type
    BEFORE INSERT OR UPDATE ON threshold_type
    FOR EACH ROW
EXECUTE PROCEDURE handle_times();

CREATE TRIGGER handle_times_frequency
    BEFORE INSERT OR UPDATE ON frequency
    FOR EACH ROW
EXECUTE PROCEDURE handle_times();

CREATE TRIGGER handle_times_recurrence
    BEFORE INSERT OR UPDATE ON recurrence
    FOR EACH ROW
EXECUTE PROCEDURE handle_times();

CREATE TRIGGER handle_times_reminder
    BEFORE INSERT OR UPDATE ON reminder
    FOR EACH ROW
EXECUTE PROCEDURE handle_times();

CREATE TRIGGER handle_times_notification
    BEFORE INSERT OR UPDATE ON notification
    FOR EACH ROW
EXECUTE PROCEDURE handle_times();

CREATE TRIGGER handle_times_user_reminder
    BEFORE INSERT OR UPDATE ON user_reminder
    FOR EACH ROW
EXECUTE PROCEDURE handle_times();